// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetPlayApp.Server.Db;

#nullable disable

namespace PetPlayApp.Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240818143701_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("PetPlayApp.Server.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.CommentLike", b =>
                {
                    b.Property<Guid>("CommentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LikedCommentsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("LikedCommentsId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentLike");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Match", b =>
                {
                    b.Property<Guid>("User1Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("OverallStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("User1Response")
                        .HasColumnType("INTEGER");

                    b.Property<int>("User2Response")
                        .HasColumnType("INTEGER");

                    b.HasKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PostId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("BLOB");

                    b.Property<Guid>("PostCreatorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostCreatorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("BLOB");

                    b.Property<Guid?>("StoryCreatorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StoryCreatorId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Interest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePictureData")
                        .HasColumnType("BLOB");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<Guid>("LikedPostsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LikesId")
                        .HasColumnType("TEXT");

                    b.HasKey("LikedPostsId", "LikesId");

                    b.HasIndex("LikesId");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Comment", b =>
                {
                    b.HasOne("PetPlayApp.Server.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetPlayApp.Server.Models.User", "User")
                        .WithMany("CreatedComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.CommentLike", b =>
                {
                    b.HasOne("PetPlayApp.Server.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetPlayApp.Server.Models.Comment", null)
                        .WithMany()
                        .HasForeignKey("LikedCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetPlayApp.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Match", b =>
                {
                    b.HasOne("PetPlayApp.Server.Models.User", "User1")
                        .WithMany("MatchesInitiated")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetPlayApp.Server.Models.User", "User2")
                        .WithMany("MatchesReceived")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Notification", b =>
                {
                    b.HasOne("PetPlayApp.Server.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetPlayApp.Server.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetPlayApp.Server.Models.User", "Subject")
                        .WithMany("Notifications")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Post");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Post", b =>
                {
                    b.HasOne("PetPlayApp.Server.Models.User", "PostCreator")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("PostCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostCreator");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Story", b =>
                {
                    b.HasOne("PetPlayApp.Server.Models.User", "StoryCreator")
                        .WithMany("StoriesCreated")
                        .HasForeignKey("StoryCreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StoryCreator");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("PetPlayApp.Server.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("LikedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetPlayApp.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PetPlayApp.Server.Models.User", b =>
                {
                    b.Navigation("CreatedComments");

                    b.Navigation("CreatedPosts");

                    b.Navigation("MatchesInitiated");

                    b.Navigation("MatchesReceived");

                    b.Navigation("Notifications");

                    b.Navigation("StoriesCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
